load("~/RData/CreatingMapsInR/Test/tmap_test.RData")
pkgs <- c("slidify", "slidifyLibraries", "rCharts")
install_github(pkgs, 'ramnathv', ref = 'dev')
install.packages('devtools')
install_github(pkgs, 'ramnathv', ref = 'dev')
library(devtools)
install_github(pkgs, 'ramnathv', ref = 'dev')
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
require(devtools)
install_github("slidify", "ramnathv")
build("C:\Users\tomal\Downloads\slidify", binary=FALSE)
build("C:/Users/tomal/Downloads/slidify", binary=FALSE)
build("C:/Users/tomal/Downloads/slidify/slidify", binary=FALSE)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install.packages("slidify")
install.packages("slidifyLibraries")
library(slidify)
install.packages("C:/Users/tomal/Downloads/slidify_0.3.1.zip", repos = NULL, type = "win.binary")
library(slidify)
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs, force = TRUE)
library(slidify)
library(slidifyLibraries)
author('myslides')
uninstall("slidify")
update_packages()
library(slidify)
install_github("ramnathv/slidify", upgrade = ask)
install_github("ramnathv/slidify", upgrade = "ask")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
install.packages("knitr")
install.packages("knitr")
library(knitr)
unlink('HEwork/Rcode/markdown/collisionSearch_7_cache', recursive = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex:::install_prebuilt()
tinytex::reinstall_tinytex()
install.packages('gtools')
library(gtools)
sch <- c("AMonly","PMonly","AMandPM","none")
permutations(n=4,r=2,v=sch,repeats.allowed = T)
permutations(n=4,r=7,v=sch,repeats.allowed = T)
?permute
?permutations
permutations(3,2,letters[1:3])
permutations(3,2,letters[1:4])
permutations(4,2,letters[1:4])
LETTERS[10:12]
ABC <- permutations(3,1,LETTERS[1:3])
XYZ <- permutations(3,1,LETTERS[24:26])
ABCXYZ <- permutations(2,2,c(ABC,XYZ))
ABCXYZ
ABCXYZ <- permutations(6,2,c(ABC,XYZ))
ABCXYZ
factorial(3)
rep(LETTERS[1:4],4)
sch <- "AM","PM","and","none"
sch <- c("AM","PM","and","none")
work <- c("A","AB","ABA")
shop <- c("afterWork","lunchBreak","dontGo")
leisure <- c("yes", "no")
parentB <- data.frame(sch = rep(sch,18), work = rep(work,24), shop = rep(shop,24), leisure = rep(leisure,36))
View(parentB)
unique(parentB)
parentB <- expand.grid(sch,work,shop,leisure)
View(parentB)
unique(parentB)
expandGridFunc <- function(arg1,arg2,...){
expand.grid(arg1,arg2,...)
}
testFOO <- expandGridFunc(sch,leisure,work)
testFOO
sch <- c("AM","PM","and","none")
work <- c("A","AB","ABA")
shop <- c("afterWork","lunchBreak","dontGo")
leisure <- c("yes", "no")
actVarFunction <- function(arg1,arg2,...){
# create data frame of all combinations
actDF <- expand.grid(arg1,arg2,...)
# add Act cols
actDF <- actDF %>% mutate(Act.1 = NA, Act.2 = NA, Act.3 = NA, Act.4 = NA, Act.5 = NA, Act.6 = NA, Act.7= NA, Act.8= NA, Act.9= NA, Act.10= NA)
}
actDF <- actVarFunction(sch,work,shop,leisure)
library(tidyverse)
actDF <- actVarFunction(sch,work,shop,leisure)
View(actDF)
print(sch)
actVarFunction <- function(arg1,arg2,arg3,arg4){
# create data frame of all combinations
actDF <- expand.grid(arg1,arg2,...)
# add Act cols
actDF <- actDF %>% mutate(Act.1 = NA, Act.2 = NA, Act.3 = NA, Act.4 = NA, Act.5 = NA, Act.6 = NA, Act.7= NA, Act.8= NA, Act.9= NA, Act.10= NA)
}
actDF <- actVarFunction(sch,work,shop)
actVarFunction <- function(...){
# create data frame of all combinations
actDF <- expand.grid(...)
# add Act cols
actDF <- actDF %>% mutate(Act.1 = NA, Act.2 = NA, Act.3 = NA, Act.4 = NA, Act.5 = NA, Act.6 = NA, Act.7= NA, Act.8= NA, Act.9= NA, Act.10= NA)
}
actDF <- actVarFunction(sch,work,shop)
View(actDF)
formalArgs(actVarFunction)
actVarFunction <- function(...){
# create data frame of all combinations
actDF <- expand.grid(...)
args <- formalArgs()
names(actDF) <- args
# add Act cols
actDF <- actDF %>% mutate(Act.1 = NA, Act.2 = NA, Act.3 = NA, Act.4 = NA, Act.5 = NA, Act.6 = NA, Act.7= NA, Act.8= NA, Act.9= NA, Act.10= NA)
}
actDF <- actVarFunction(sch,work,shop)
actVarFunction <- function(...){
# create data frame of all combinations
actDF <- expand.grid(...)
# add Act cols
actDF <- actDF %>% mutate(Act.1 = NA, Act.2 = NA, Act.3 = NA, Act.4 = NA, Act.5 = NA, Act.6 = NA, Act.7= NA, Act.8= NA, Act.9= NA, Act.10= NA)
}
actDF <- actVarFunction(sch,work,shop)
View(actDF)
actDF <- actVarFunction(sch,work,shop,leisure)
actDF <- actVarFunction(sch,work,shop,leisure)
View(actDF)
actDF <- rename(Var1 = sch)
actDF <- actDF %>% rename(Var1 = sch)
View(actDF)
actDF <- actDF %>% rename(sch = Var1)
View(actDF)
actDF <- actVarFunction(sch,work,shop,leisure)
actDF <- actDF %>% rename(sch = Var1, work = Var2, shop = Var3, leisure = Var4)
View(actDF)
View(actDF)
actDF <- actDF %>% mutate(Act.1 = "home")
actDF <- actDF %>% mutate(Act.2 = ifelse(sch == "AM" | "and"),"education",
ifelse(sch == "PM" | "none","work",NA)
)
actDF <- actDF %>% mutate(Act.2 = ifelse(sch == ("AM" | "and")),"education",
ifelse(sch == ("PM" | "none"),"work",NA)
)
actDF <- actDF %>% mutate(Act.2 = ifelse(sch == "AM" | sch =="and","education",
ifelse(sch == ("PM" | sch =="none","work",NA)))
)
actDF <- actDF %>% mutate(Act.2 = ifelse(sch == "AM" | sch =="and","education",
ifelse(sch == "PM" | sch =="none","work",NA))
)
View(actDF)
combinations(letters[1:3])
combinations(letters[1:3],3)
combinations(letters[1:3],2)
combinations(3,letters[1:3])
?combinations
combinations(3,2,letters[1:3])
combinations(3,3,letters[1:3])
permutations(3,3,letters[1:3])
actDF <- actDF %>% mutate(Act.3 = ifelse(Act.2 == "education","work",
ifelse(work == "AB" & shop =="lunchBreak","shop",NA))
)
actDF <- actDF %>% mutate(Act.3 = ifelse(Act.2 == "education","work",
ifelse(work == "AB" & shop =="lunchBreak","shop",
ifelse(work == "A" & sch =="PM","education",NA))
)
)
actDF <- actDF %>% mutate(Act.3 = ifelse(Act.2 == "education","work",
ifelse(work == c("AB","A") & shop =="lunchBreak","shop",
ifelse(work == "A" & sch =="PM","education",NA)))
)
actDF <- actDF %>% mutate(Act.3 = ifelse(Act.2 == "education","work",
ifelse(work == c("AB","A") & shop =="lunchBreak","shop",
ifelse(work == "A" & sch =="PM","education",
ifelse(work == "A" & sch =="PM","education",NA))))
)
actDF <- actDF %>% mutate(Act.3 = ifelse(Act.2 == "education","work",
ifelse(work == "A" & shop =="lunchBreak","shop",
ifelse(work == "AB" & shop =="lunchBreak","shop",
ifelse(work == "A" & sch =="PM","education",
ifelse(work == "A" & sch =="PM","education",NA)))))
)
actDF <- actDF %>% mutate(Act.3 = ifelse(Act.2 == "education","work",
ifelse(work == "A" & shop =="lunchBreak","shop",
ifelse(work == "AB" & shop =="lunchBreak","shop",
ifelse(work == "A" & sch =="PM","education",
ifelse(work == "A" & sch =="PM","education",
ifelse(work == "ABA","work",NA))))))
)
actDF <- actDF %>% mutate(Act.3 = ifelse(Act.2 == "education","work",
ifelse(work == "A" & shop =="lunchBreak","shop",
ifelse(work == "AB" & shop =="lunchBreak","shop",
ifelse(work == "A" & sch =="PM","education",
ifelse(work == "A" & sch =="PM","education",
ifelse(work == "ABA" | work == "AB","work",NA))))))
)
actDF <- actDF %>% mutate(Act.3 = ifelse(Act.2 == "education","work",
ifelse(work == "A" & shop =="lunchBreak","shop",
ifelse(work == "AB" & shop =="lunchBreak","shop",
ifelse(work == "A" & sch =="PM","education",
ifelse(work == "A" & sch =="PM","education",
ifelse(work == "ABA" | work == "AB","work",
ifelse(work == "A","home",NA))))))
)
)
library()
library(installr)
updateR()
library()
sessionInfo()
ls()
search()
remove.packages("colorSpace")
remove.packages("colorspace")
remotes::install_github("AllanCameron/geomtextpath")
remove.packages("rlang")
t <- seq(5, -1, length.out = 1000) * pi
spiral <- data.frame(x    = sin(t) * 1:1000,
y    = cos(t) * 1:1000,
text = paste("Like a circle in a spiral,",
"like a wheel within a wheel,",
"never ending or beginning,",
"on an ever spinning reel")
)
rm(t)
ggplot(spiral, aes(x, y, label = text)) +
geom_textpath(size = 7, vjust = 2, text_only = TRUE) +
coord_equal(xlim = c(-1500, 1500), ylim = c(-1500, 1500))
library(tidyverse)
library(tidyverse)
ggplot(spiral, aes(x, y, label = text)) +
geom_textpath(size = 7, vjust = 2, text_only = TRUE) +
coord_equal(xlim = c(-1500, 1500), ylim = c(-1500, 1500))
library(ggplot2)
ggplot(spiral, aes(x, y, label = text)) +
geom_textpath(size = 7, vjust = 2, text_only = TRUE) +
coord_equal(xlim = c(-1500, 1500), ylim = c(-1500, 1500))
install.packages("geomtextpath")
library(tidyverse)
library(sf)
library(dplyr)
library(knitr)
library(markdown)
library(rmarkdown)
library(plyr)
library(purrr)
library(reshape2)
library(lubridate)
#library(pander)
library(kableExtra)
library(stringr)
library(janitor)
library(tidyr)
library(leaflet)
#library(xtable)
#library(xfun)
setwd("~/HEwork/Rcode")
myShapePath <- Sys.glob(choose.files(default = "shp/searchClips/active/*.shp" ))
shape <- read_sf(myShapePath)
#shape <- st_read(Sys.glob("shp/searchClips/active/*.shp", dirmark = TRUE))
#shape <- st_transform(shape, crs = 4326)
#load("accsAll_sf.RData")
load("~/HEwork/Rcode/rData/keyAccsData.RData")
startDate <- as.Date("2017-01-01")
endDate <- as.Date("2021-12-31")
accsAll.sf <- accsAll.sf %>% filter(year(date)<=year(endDate)) %>% filter(year(date)>=year(startDate))
accsAll.sf <- accsAll.sf %>% filter(date<=endDate) %>% filter(date>=startDate)
accsSearch <- st_intersection(accsAll.sf, shape)
coords <- as.data.frame(st_coordinates(accsSearch))
accsSearch <- cbind(accsSearch,coords)
accsSearch <- accsSearch %>% arrange(X)
accsSearch$plotNumber <- 1:nrow(accsSearch)
title <- as.character(myShapePath)
title <- str_remove(title,"C:\\\\Users\\\\tomal\\\\Documents\\\\HEwork\\\\Rcode\\\\shp\\\\searchClips\\\\active\\\\")
title <- str_remove(title,".shp")
title <- as.character(title)
save.image("~/HEwork/Rcode/objectsForCollisionSearch.RData")
####################################################
setwd("~/HEwork/Rcode")
xfun::Rscript_call(
rmarkdown::render,
list(input = "markdown/collisionSearch_11.Rmd", output_format = 'pdf_document')
)
file.rename(from = "markdown/collisionSearch_11.pdf",
to = paste0("output/collisionSearches/",title,"_collision_descriptions.pdf"))
source("~/HEwork/Rcode/script/collisionMap.R")
file.rename(from = "map.html",
to = paste0("output/collisionSearches/",title,"_collision_plot.html"))
load("~/HEwork/Rcode/objectsForCollisionSearch.RData")
source("~/HEwork/Rcode/script/collisionSummary.R")
rmarkdown::render(input = "C:/Users/tomal/Documents/HEwork/Rcode/script/collisionSummaryReport.Rmd",
output_format = "pdf_document",
output_file = paste(title,"_summary_tables", ".pdf", sep=''),
output_dir = "C:/Users/tomal/Documents/HEwork/Rcode/output/collisionSearches")
test_files <- list.files(path = "~/HEwork/Rcode/output/collisionSearches/", pattern = title, full.names=TRUE)
zip(zipfile = paste0("~/HEwork/Rcode/output/collisionSearches/",title,".zip"), files = test_files, flags = " a -tzip",
zip = "C:\\Program Files\\7-Zip\\7Z")
file.remove(test_files)
library(tidyverse)
library(sf)
library(tictoc)
# setwd("~/matsim/dataPrep/population/make-matsim-pop")
setwd(choose.dir(default = "", caption = "Select folder"))
popFile <- "xml/dinasPop.xml"
popSize <- 500
############################################################
####                    run                             ####
####  - choose working directory                        ####
####  - load libraries                                  ####
####  - set pop size - how many agents do you want?     ####
############################################################
tic(paste0("time taken to make ", popSize, " agent plans"))
source("dinas/makePopDF2.R")
source("dinas/makePopXML2.R")
toc()
dinasPop <- readRDS("~/matsim/dataPrep/population/make-matsim-pop/xml/dinasPop.Rds")
View(dinasPop)
